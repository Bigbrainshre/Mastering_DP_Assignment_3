#include <bits/stdc++.h>
using namespace std;

int findlcs(string s1, string s2, int n, int m, vector<vector<int>>& dp) {

	//Base Cases

	//Return zero if string is over
    if (n < 0 || m < 0) return 0; 
    //If one of the string is on its last element
    if ((n == 0 || m == 0) && (s1[n] == s2[m])) return 1;
    


    //If already stored then just return
    if (dp[n][m] != -1) return dp[n][m];
    


    //Taking all posibilities


    //Moving on to the next element of s1
    int a = findlcs(s1, s2, n - 1, m, dp);
    //Moving on to the next element of s2
    int b = findlcs(s1, s2, n, m - 1, dp);
    //Moving to the next element in both
    int c = findlcs(s1, s2, n - 1, m - 1, dp);

    //If both elements were same increase the length of the substring
    if (s1[n] == s2[m]) {
        c += 1;
    }
    //For reference the original code incremented all the values which just does work
    //this is because we have to increment the length only if both the elements were equal




    //Storing in dp
    dp[n][m] = max({a, b, c});
    return dp[n][m];
}

int longestCommonSubsequence(string s1, string s2) {
    int n = s1.size();
    int m = s2.size();
    vector<vector<int>> dp(n, vector<int>(m, -1));
    return findlcs(s1, s2, n - 1, m - 1, dp);
}

int main(){
    string s1,s2;
    cin >> s1 >> s2;
    cout << longestCommonSubsequence(s1,s2);
}
